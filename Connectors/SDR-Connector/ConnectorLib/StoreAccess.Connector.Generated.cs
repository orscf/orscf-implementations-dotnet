using MedicalResearch.SubjectData.Model;
using Newtonsoft.Json;
using System;
using System.Net;

namespace MedicalResearch.SubjectData.StoreAccess {
  
  public partial class SdrStoreConnector {
    
    public SdrStoreConnector(string url, string apiToken) {
      
      if (!url.EndsWith("/")) {
        url = url + "/";
      }
      
      _SubjectsClient = new SubjectsClient(url + "subjects/", apiToken);
      _SubjectSiteAssignmentsClient = new SubjectSiteAssignmentsClient(url + "subjectSiteAssignments/", apiToken);
      
    }
    
    private SubjectsClient _SubjectsClient = null;
    /// <summary> Provides CRUD access to stored Subjects (based on schema version '0.1.0') </summary>
    public ISubjects Subjects {
      get {
        return _SubjectsClient;
      }
    }
    
    private SubjectSiteAssignmentsClient _SubjectSiteAssignmentsClient = null;
    /// <summary> Provides CRUD access to stored SubjectSiteAssignments (based on schema version '0.1.0') </summary>
    public ISubjectSiteAssignments SubjectSiteAssignments {
      get {
        return _SubjectSiteAssignmentsClient;
      }
    }
    
  }
  
  /// <summary> Provides CRUD access to stored Subjects (based on schema version '0.1.0') </summary>
  internal partial class SubjectsClient : ISubjects {
    
    private string _Url;
    private string _ApiToken;
    
    public SubjectsClient(string url, string apiToken) {
      _Url = url;
      _ApiToken = apiToken;
    }
    
    private WebClient CreateWebClient() {
      var wc = new WebClient();
      wc.Headers.Set("Authorization", _ApiToken);
      wc.Headers.Set("Content-Type", "application/json");
      return wc;
    }
    
    /// <summary> Loads a specific Subject addressed by the given primary identifier. Returns null on failure, or if no record exists with the given identity. </summary>
    /// <param name="subjectUid"> An <see href="https://de.wikipedia.org/wiki/Universally_Unique_Identifier">Universally Unique Identifier</see> which can be generated by any origin system and is used to address this ORSCF conform data record in decentralized environments. Note that this Identity must not be changed any more! </param>
    public Subject GetSubjectBySubjectUid(Guid subjectUid) {
      using (var webClient = this.CreateWebClient()) {
        string url = _Url + "getSubjectBySubjectUid";
        var args = new GetSubjectBySubjectUidRequest {
          subjectUid = subjectUid
        };
        string rawRequest = JsonConvert.SerializeObject(args);
        string rawResponse = webClient.UploadString(url, rawRequest);
        var result = JsonConvert.DeserializeObject<GetSubjectBySubjectUidResponse>(rawResponse);
        if(result.fault != null){
          throw new Exception(result.fault);
        }
        return result.@return;
      }
    }
    
    /// <summary> Loads Subjects. </summary>
    /// <param name="page"> Number of the page, which should be returned </param>
    /// <param name="pageSize"> Max count of Subjects which should be returned </param>
    public Subject[] GetSubjects(Int32 page = 1, Int32 pageSize = 20) {
      using (var webClient = this.CreateWebClient()) {
        string url = _Url + "getSubjects";
        var args = new GetSubjectsRequest {
          page = page,
          pageSize = pageSize
        };
        string rawRequest = JsonConvert.SerializeObject(args);
        string rawResponse = webClient.UploadString(url, rawRequest);
        var result = JsonConvert.DeserializeObject<GetSubjectsResponse>(rawResponse);
        if(result.fault != null){
          throw new Exception(result.fault);
        }
        return result.@return;
      }
    }
    
    /// <summary> Loads Subjects where values matching to the given filterExpression </summary>
    /// <param name="filterExpression"> a filter expression like '((FieldName1 == "ABC" &amp;&amp; FieldName2 &gt; 12) || FieldName2 != "")' </param>
    /// <param name="sortingExpression"> one or more property names which are used as sort order (before pagination) </param>
    /// <param name="page"> Number of the page, which should be returned </param>
    /// <param name="pageSize"> Max count of Subjects which should be returned </param>
    public Subject[] SearchSubjects(String filterExpression, String sortingExpression = null, Int32 page = 1, Int32 pageSize = 20) {
      using (var webClient = this.CreateWebClient()) {
        string url = _Url + "searchSubjects";
        var args = new SearchSubjectsRequest {
          filterExpression = filterExpression,
          sortingExpression = sortingExpression,
          page = page,
          pageSize = pageSize
        };
        string rawRequest = JsonConvert.SerializeObject(args);
        string rawResponse = webClient.UploadString(url, rawRequest);
        var result = JsonConvert.DeserializeObject<SearchSubjectsResponse>(rawResponse);
        if(result.fault != null){
          throw new Exception(result.fault);
        }
        return result.@return;
      }
    }
    
    /// <summary> Adds a new Subject and returns its primary identifier (or null on failure). </summary>
    /// <param name="subject"> Subject containing the new values </param>
    public Boolean AddNewSubject(Subject subject) {
      using (var webClient = this.CreateWebClient()) {
        string url = _Url + "addNewSubject";
        var args = new AddNewSubjectRequest {
          subject = subject
        };
        string rawRequest = JsonConvert.SerializeObject(args);
        string rawResponse = webClient.UploadString(url, rawRequest);
        var result = JsonConvert.DeserializeObject<AddNewSubjectResponse>(rawResponse);
        if(result.fault != null){
          throw new Exception(result.fault);
        }
        return result.@return;
      }
    }
    
    /// <summary> Updates all values (which are not "FixedAfterCreation") of the given Subject addressed by the primary identifier fields within the given Subject. Returns false on failure or if no target record was found, otherwise true. </summary>
    /// <param name="subject"> Subject containing the new values (the primary identifier fields within the given Subject will be used to address the target record) </param>
    public Boolean UpdateSubject(Subject subject) {
      using (var webClient = this.CreateWebClient()) {
        string url = _Url + "updateSubject";
        var args = new UpdateSubjectRequest {
          subject = subject
        };
        string rawRequest = JsonConvert.SerializeObject(args);
        string rawResponse = webClient.UploadString(url, rawRequest);
        var result = JsonConvert.DeserializeObject<UpdateSubjectResponse>(rawResponse);
        if(result.fault != null){
          throw new Exception(result.fault);
        }
        return result.@return;
      }
    }
    
    /// <summary> Updates all values (which are not "FixedAfterCreation") of the given Subject addressed by the supplementary given primary identifier. Returns false on failure or if no target record was found, otherwise true. </summary>
    /// <param name="subjectUid"> An <see href="https://de.wikipedia.org/wiki/Universally_Unique_Identifier">Universally Unique Identifier</see> which can be generated by any origin system and is used to address this ORSCF conform data record in decentralized environments. Note that this Identity must not be changed any more! </param>
    /// <param name="subject"> Subject containing the new values (the primary identifier fields within the given Subject will be ignored) </param>
    public Boolean UpdateSubjectBySubjectUid(Guid subjectUid, Subject subject) {
      using (var webClient = this.CreateWebClient()) {
        string url = _Url + "updateSubjectBySubjectUid";
        var args = new UpdateSubjectBySubjectUidRequest {
          subjectUid = subjectUid,
          subject = subject
        };
        string rawRequest = JsonConvert.SerializeObject(args);
        string rawResponse = webClient.UploadString(url, rawRequest);
        var result = JsonConvert.DeserializeObject<UpdateSubjectBySubjectUidResponse>(rawResponse);
        if(result.fault != null){
          throw new Exception(result.fault);
        }
        return result.@return;
      }
    }
    
    /// <summary> Deletes a specific Subject addressed by the given primary identifier. Returns false on failure or if no target record was found, otherwise true. </summary>
    /// <param name="subjectUid"> An <see href="https://de.wikipedia.org/wiki/Universally_Unique_Identifier">Universally Unique Identifier</see> which can be generated by any origin system and is used to address this ORSCF conform data record in decentralized environments. Note that this Identity must not be changed any more! </param>
    public Boolean DeleteSubjectBySubjectUid(Guid subjectUid) {
      using (var webClient = this.CreateWebClient()) {
        string url = _Url + "deleteSubjectBySubjectUid";
        var args = new DeleteSubjectBySubjectUidRequest {
          subjectUid = subjectUid
        };
        string rawRequest = JsonConvert.SerializeObject(args);
        string rawResponse = webClient.UploadString(url, rawRequest);
        var result = JsonConvert.DeserializeObject<DeleteSubjectBySubjectUidResponse>(rawResponse);
        if(result.fault != null){
          throw new Exception(result.fault);
        }
        return result.@return;
      }
    }
    
  }
  
  /// <summary> Provides CRUD access to stored SubjectSiteAssignments (based on schema version '0.1.0') </summary>
  internal partial class SubjectSiteAssignmentsClient : ISubjectSiteAssignments {
    
    private string _Url;
    private string _ApiToken;
    
    public SubjectSiteAssignmentsClient(string url, string apiToken) {
      _Url = url;
      _ApiToken = apiToken;
    }
    
    private WebClient CreateWebClient() {
      var wc = new WebClient();
      wc.Headers.Set("Authorization", _ApiToken);
      wc.Headers.Set("Content-Type", "application/json");
      return wc;
    }
    
    /// <summary> Loads a specific SubjectSiteAssignment addressed by the given primary identifier. Returns null on failure, or if no record exists with the given identity. </summary>
    /// <param name="subjectSiteAssignmentUid"> An <see href="https://de.wikipedia.org/wiki/Universally_Unique_Identifier">Universally Unique Identifier</see> which can be generated by any origin system and is used to address this ORSCF conform data record in decentralized environments. Note that this Identity must not be changed any more! </param>
    public SubjectSiteAssignment GetSubjectSiteAssignmentBySubjectSiteAssignmentUid(Guid subjectSiteAssignmentUid) {
      using (var webClient = this.CreateWebClient()) {
        string url = _Url + "getSubjectSiteAssignmentBySubjectSiteAssignmentUid";
        var args = new GetSubjectSiteAssignmentBySubjectSiteAssignmentUidRequest {
          subjectSiteAssignmentUid = subjectSiteAssignmentUid
        };
        string rawRequest = JsonConvert.SerializeObject(args);
        string rawResponse = webClient.UploadString(url, rawRequest);
        var result = JsonConvert.DeserializeObject<GetSubjectSiteAssignmentBySubjectSiteAssignmentUidResponse>(rawResponse);
        if(result.fault != null){
          throw new Exception(result.fault);
        }
        return result.@return;
      }
    }
    
    /// <summary> Loads SubjectSiteAssignments. </summary>
    /// <param name="page"> Number of the page, which should be returned </param>
    /// <param name="pageSize"> Max count of SubjectSiteAssignments which should be returned </param>
    public SubjectSiteAssignment[] GetSubjectSiteAssignments(Int32 page = 1, Int32 pageSize = 20) {
      using (var webClient = this.CreateWebClient()) {
        string url = _Url + "getSubjectSiteAssignments";
        var args = new GetSubjectSiteAssignmentsRequest {
          page = page,
          pageSize = pageSize
        };
        string rawRequest = JsonConvert.SerializeObject(args);
        string rawResponse = webClient.UploadString(url, rawRequest);
        var result = JsonConvert.DeserializeObject<GetSubjectSiteAssignmentsResponse>(rawResponse);
        if(result.fault != null){
          throw new Exception(result.fault);
        }
        return result.@return;
      }
    }
    
    /// <summary> Loads SubjectSiteAssignments where values matching to the given filterExpression </summary>
    /// <param name="filterExpression"> a filter expression like '((FieldName1 == "ABC" &amp;&amp; FieldName2 &gt; 12) || FieldName2 != "")' </param>
    /// <param name="sortingExpression"> one or more property names which are used as sort order (before pagination) </param>
    /// <param name="page"> Number of the page, which should be returned </param>
    /// <param name="pageSize"> Max count of SubjectSiteAssignments which should be returned </param>
    public SubjectSiteAssignment[] SearchSubjectSiteAssignments(String filterExpression, String sortingExpression = null, Int32 page = 1, Int32 pageSize = 20) {
      using (var webClient = this.CreateWebClient()) {
        string url = _Url + "searchSubjectSiteAssignments";
        var args = new SearchSubjectSiteAssignmentsRequest {
          filterExpression = filterExpression,
          sortingExpression = sortingExpression,
          page = page,
          pageSize = pageSize
        };
        string rawRequest = JsonConvert.SerializeObject(args);
        string rawResponse = webClient.UploadString(url, rawRequest);
        var result = JsonConvert.DeserializeObject<SearchSubjectSiteAssignmentsResponse>(rawResponse);
        if(result.fault != null){
          throw new Exception(result.fault);
        }
        return result.@return;
      }
    }
    
    /// <summary> Adds a new SubjectSiteAssignment and returns its primary identifier (or null on failure). </summary>
    /// <param name="subjectSiteAssignment"> SubjectSiteAssignment containing the new values </param>
    public Boolean AddNewSubjectSiteAssignment(SubjectSiteAssignment subjectSiteAssignment) {
      using (var webClient = this.CreateWebClient()) {
        string url = _Url + "addNewSubjectSiteAssignment";
        var args = new AddNewSubjectSiteAssignmentRequest {
          subjectSiteAssignment = subjectSiteAssignment
        };
        string rawRequest = JsonConvert.SerializeObject(args);
        string rawResponse = webClient.UploadString(url, rawRequest);
        var result = JsonConvert.DeserializeObject<AddNewSubjectSiteAssignmentResponse>(rawResponse);
        if(result.fault != null){
          throw new Exception(result.fault);
        }
        return result.@return;
      }
    }
    
    /// <summary> Updates all values (which are not "FixedAfterCreation") of the given SubjectSiteAssignment addressed by the primary identifier fields within the given SubjectSiteAssignment. Returns false on failure or if no target record was found, otherwise true. </summary>
    /// <param name="subjectSiteAssignment"> SubjectSiteAssignment containing the new values (the primary identifier fields within the given SubjectSiteAssignment will be used to address the target record) </param>
    public Boolean UpdateSubjectSiteAssignment(SubjectSiteAssignment subjectSiteAssignment) {
      using (var webClient = this.CreateWebClient()) {
        string url = _Url + "updateSubjectSiteAssignment";
        var args = new UpdateSubjectSiteAssignmentRequest {
          subjectSiteAssignment = subjectSiteAssignment
        };
        string rawRequest = JsonConvert.SerializeObject(args);
        string rawResponse = webClient.UploadString(url, rawRequest);
        var result = JsonConvert.DeserializeObject<UpdateSubjectSiteAssignmentResponse>(rawResponse);
        if(result.fault != null){
          throw new Exception(result.fault);
        }
        return result.@return;
      }
    }
    
    /// <summary> Updates all values (which are not "FixedAfterCreation") of the given SubjectSiteAssignment addressed by the supplementary given primary identifier. Returns false on failure or if no target record was found, otherwise true. </summary>
    /// <param name="subjectSiteAssignmentUid"> An <see href="https://de.wikipedia.org/wiki/Universally_Unique_Identifier">Universally Unique Identifier</see> which can be generated by any origin system and is used to address this ORSCF conform data record in decentralized environments. Note that this Identity must not be changed any more! </param>
    /// <param name="subjectSiteAssignment"> SubjectSiteAssignment containing the new values (the primary identifier fields within the given SubjectSiteAssignment will be ignored) </param>
    public Boolean UpdateSubjectSiteAssignmentBySubjectSiteAssignmentUid(Guid subjectSiteAssignmentUid, SubjectSiteAssignment subjectSiteAssignment) {
      using (var webClient = this.CreateWebClient()) {
        string url = _Url + "updateSubjectSiteAssignmentBySubjectSiteAssignmentUid";
        var args = new UpdateSubjectSiteAssignmentBySubjectSiteAssignmentUidRequest {
          subjectSiteAssignmentUid = subjectSiteAssignmentUid,
          subjectSiteAssignment = subjectSiteAssignment
        };
        string rawRequest = JsonConvert.SerializeObject(args);
        string rawResponse = webClient.UploadString(url, rawRequest);
        var result = JsonConvert.DeserializeObject<UpdateSubjectSiteAssignmentBySubjectSiteAssignmentUidResponse>(rawResponse);
        if(result.fault != null){
          throw new Exception(result.fault);
        }
        return result.@return;
      }
    }
    
    /// <summary> Deletes a specific SubjectSiteAssignment addressed by the given primary identifier. Returns false on failure or if no target record was found, otherwise true. </summary>
    /// <param name="subjectSiteAssignmentUid"> An <see href="https://de.wikipedia.org/wiki/Universally_Unique_Identifier">Universally Unique Identifier</see> which can be generated by any origin system and is used to address this ORSCF conform data record in decentralized environments. Note that this Identity must not be changed any more! </param>
    public Boolean DeleteSubjectSiteAssignmentBySubjectSiteAssignmentUid(Guid subjectSiteAssignmentUid) {
      using (var webClient = this.CreateWebClient()) {
        string url = _Url + "deleteSubjectSiteAssignmentBySubjectSiteAssignmentUid";
        var args = new DeleteSubjectSiteAssignmentBySubjectSiteAssignmentUidRequest {
          subjectSiteAssignmentUid = subjectSiteAssignmentUid
        };
        string rawRequest = JsonConvert.SerializeObject(args);
        string rawResponse = webClient.UploadString(url, rawRequest);
        var result = JsonConvert.DeserializeObject<DeleteSubjectSiteAssignmentBySubjectSiteAssignmentUidResponse>(rawResponse);
        if(result.fault != null){
          throw new Exception(result.fault);
        }
        return result.@return;
      }
    }
    
  }
  
}
